# README

Projeto: Sistema Administrativo Desktop em Java (Swing) — conexão MySQL (JDBC)

O que incluí neste repositório gerado automaticamente:

- `sql/schema.sql` — script SQL para criar as tabelas exemplo (clientes, produtos, pedidos e itens_pedido).
- `db.properties` — arquivo de configuração com URL do banco, usuário e senha.
- `src/com/adminapp/Main.java` — classe `main` que inicializa a aplicação.
- `src/com/adminapp/db/Database.java` — gerenciador de conexão JDBC (pool simples).
- `src/com/adminapp/model/*` — classes modelo (Customer, Product, Order, OrderItem).
- `src/com/adminapp/dao/*` — classes DAO com operações CRUD para cada entidade.
- `src/com/adminapp/ui/*` — código Swing: `MainFrame`, e `CustomerPanel`, `ProductPanel`, `OrderPanel`.
- `src/com/adminapp/util/CSVExporter.java` — utilitário para exportar tabelas para CSV.

---

# Instruções de uso

1. Instale o MySQL (ou use um servidor compatível). Crie um banco, por exemplo `admin_app_db`.
2. Importe `sql/schema.sql` no seu MySQL para criar as tabelas de exemplo.
3. Ajuste as credenciais em `db.properties` (host, porta, database, user, password).
4. Compile o projeto (por exemplo com `javac` ou através do seu IDE - NetBeans/IntelliJ/Eclipse). É necessário o driver JDBC do MySQL (mysql-connector-java). Se usar Maven/Gradle, adicione a dependência correspondente.
5. Execute `com.adminapp.Main`.

Observações:
- O projeto foi gerado com foco em simplicidade e clareza. É um bom ponto de partida para ampliar permissões, autenticação, relatórios, validações e tratamento mais robusto de erros.

---

// FILE: sql/schema.sql
-- Script de criação de tabelas de exemplo (MySQL)
CREATE DATABASE IF NOT EXISTS admin_app_db CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
USE admin_app_db;

CREATE TABLE IF NOT EXISTS cliente (
  id INT AUTO_INCREMENT PRIMARY KEY,
  nome VARCHAR(150) NOT NULL,
  email VARCHAR(150),
  telefone VARCHAR(30),
  endereco VARCHAR(255)
);

CREATE TABLE IF NOT EXISTS produto (
  id INT AUTO_INCREMENT PRIMARY KEY,
  nome VARCHAR(150) NOT NULL,
  descricao TEXT,
  preco DECIMAL(10,2) NOT NULL DEFAULT 0.00,
  quantidade INT NOT NULL DEFAULT 0
);

CREATE TABLE IF NOT EXISTS pedido (
  id INT AUTO_INCREMENT PRIMARY KEY,
  cliente_id INT NOT NULL,
  data_pedido DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  total DECIMAL(10,2) NOT NULL DEFAULT 0.00,
  FOREIGN KEY (cliente_id) REFERENCES cliente(id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS item_pedido (
  id INT AUTO_INCREMENT PRIMARY KEY,
  pedido_id INT NOT NULL,
  produto_id INT NOT NULL,
  quantidade INT NOT NULL DEFAULT 1,
  subtotal DECIMAL(10,2) NOT NULL DEFAULT 0.00,
  FOREIGN KEY (pedido_id) REFERENCES pedido(id) ON DELETE CASCADE,
  FOREIGN KEY (produto_id) REFERENCES produto(id)
);

-- Inserções de exemplo
INSERT INTO cliente (nome, email, telefone, endereco) VALUES
('Empresa A', 'contato@empresaa.com', '11-9999-0000', 'Rua A, 123'),
('Cliente B', 'cliente.b@example.com', '21-8888-1111', 'Av. B, 45');

INSERT INTO produto (nome, descricao, preco, quantidade) VALUES
('Produto 1', 'Descrição do produto 1', 10.50, 100),
('Produto 2', 'Descrição do produto 2', 25.00, 50);


// FILE: db.properties
# Ajuste estas propriedades antes de rodar
db.url=jdbc:mysql://localhost:3306/admin_app_db?useSSL=false&serverTimezone=UTC
db.user=root
db.password=senha


// FILE: src/com/adminapp/Main.java
package com.adminapp;

import javax.swing.SwingUtilities;
import com.adminapp.ui.MainFrame;

public class Main {
    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            MainFrame frame = new MainFrame();
            frame.setVisible(true);
        });
    }
}


// FILE: src/com/adminapp/db/Database.java
package com.adminapp.db;

import java.sql.*;
import java.util.Properties;
import java.io.InputStream;

public class Database {
    private static String url;
    private static String user;
    private static String password;

    static {
        try (InputStream in = Database.class.getResourceAsStream("/db.properties")) {
            Properties p = new Properties();
            if (in != null) p.load(in);
            url = p.getProperty("db.url", "jdbc:mysql://localhost:3306/admin_app_db");
            user = p.getProperty("db.user", "root");
            password = p.getProperty("db.password", "");
            Class.forName("com.mysql.cj.jdbc.Driver");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public static Connection getConnection() throws SQLException {
        return DriverManager.getConnection(url, user, password);
    }
}


// FILE: src/com/adminapp/model/Customer.java
package com.adminapp.model;

public class Customer {
    private int id;
    private String nome;
    private String email;
    private String telefone;
    private String endereco;

    public Customer() {}

    public Customer(int id, String nome, String email, String telefone, String endereco) {
        this.id = id; this.nome = nome; this.email = email; this.telefone = telefone; this.endereco = endereco;
    }

    // getters e setters
    public int getId() { return id; }
    public void setId(int id) { this.id = id; }
    public String getNome() { return nome; }
    public void setNome(String nome) { this.nome = nome; }
    public String getEmail() { return email; }
    public void setEmail(String email) { this.email = email; }
    public String getTelefone() { return telefone; }
    public void setTelefone(String telefone) { this.telefone = telefone; }
    public String getEndereco() { return endereco; }
    public void setEndereco(String endereco) { this.endereco = endereco; }
}


// FILE: src/com/adminapp/model/Product.java
package com.adminapp.model;
import java.math.BigDecimal;

public class Product {
    private int id;
    private String nome;
    private String descricao;
    private BigDecimal preco;
    private int quantidade;

    public Product() {}

    // getters/setters
    public int getId() { return id; }
    public void setId(int id) { this.id = id; }
    public String getNome() { return nome; }
    public void setNome(String nome) { this.nome = nome; }
    public String getDescricao() { return descricao; }
    public void setDescricao(String descricao) { this.descricao = descricao; }
    public BigDecimal getPreco() { return preco; }
    public void setPreco(BigDecimal preco) { this.preco = preco; }
    public int getQuantidade() { return quantidade; }
    public void setQuantidade(int quantidade) { this.quantidade = quantidade; }
}


// FILE: src/com/adminapp/model/Order.java
package com.adminapp.model;

import java.math.BigDecimal;
import java.util.Date;
import java.util.List;

public class Order {
    private int id;
    private int clienteId;
    private Date dataPedido;
    private BigDecimal total;
    private List<OrderItem> items;

    // getters/setters
    public int getId() { return id; }
    public void setId(int id) { this.id = id; }
    public int getClienteId() { return clienteId; }
    public void setClienteId(int clienteId) { this.clienteId = clienteId; }
    public Date getDataPedido() { return dataPedido; }
    public void setDataPedido(Date dataPedido) { this.dataPedido = dataPedido; }
    public BigDecimal getTotal() { return total; }
    public void setTotal(BigDecimal total) { this.total = total; }
    public List<OrderItem> getItems() { return items; }
    public void setItems(List<OrderItem> items) { this.items = items; }
}


// FILE: src/com/adminapp/model/OrderItem.java
package com.adminapp.model;

import java.math.BigDecimal;

public class OrderItem {
    private int id;
    private int pedidoId;
    private int produtoId;
    private int quantidade;
    private BigDecimal subtotal;

    // getters/setters
    public int getId() { return id; }
    public void setId(int id) { this.id = id; }
    public int getPedidoId() { return pedidoId; }
    public void setPedidoId(int pedidoId) { this.pedidoId = pedidoId; }
    public int getProdutoId() { return produtoId; }
    public void setProdutoId(int produtoId) { this.produtoId = produtoId; }
    public int getQuantidade() { return quantidade; }
    public void setQuantidade(int quantidade) { this.quantidade = quantidade; }
    public BigDecimal getSubtotal() { return subtotal; }
    public void setSubtotal(BigDecimal subtotal) { this.subtotal = subtotal; }
}


// FILE: src/com/adminapp/dao/CustomerDAO.java
package com.adminapp.dao;

import com.adminapp.db.Database;
import com.adminapp.model.Customer;
import java.sql.*;
import java.util.*;

public class CustomerDAO {
    public List<Customer> findAll() throws SQLException {
        List<Customer> list = new ArrayList<>();
        String sql = "SELECT id,nome,email,telefone,endereco FROM cliente ORDER BY nome";
        try (Connection c = Database.getConnection(); PreparedStatement ps = c.prepareStatement(sql); ResultSet rs = ps.executeQuery()){
            while (rs.next()){
                Customer cu = new Customer(rs.getInt(1), rs.getString(2), rs.getString(3), rs.getString(4), rs.getString(5));
                list.add(cu);
            }
        }
        return list;
    }

    public Customer findById(int id) throws SQLException {
        String sql = "SELECT id,nome,email,telefone,endereco FROM cliente WHERE id=?";
        try (Connection c = Database.getConnection(); PreparedStatement ps = c.prepareStatement(sql)){
            ps.setInt(1, id);
            try (ResultSet rs = ps.executeQuery()){
                if (rs.next()) return new Customer(rs.getInt(1), rs.getString(2), rs.getString(3), rs.getString(4), rs.getString(5));
            }
        }
        return null;
    }

    public void insert(Customer cst) throws SQLException {
        String sql = "INSERT INTO cliente (nome,email,telefone,endereco) VALUES(?,?,?,?)";
        try (Connection c = Database.getConnection(); PreparedStatement ps = c.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)){
            ps.setString(1, cst.getNome()); ps.setString(2, cst.getEmail()); ps.setString(3, cst.getTelefone()); ps.setString(4, cst.getEndereco());
            ps.executeUpdate();
            try (ResultSet keys = ps.getGeneratedKeys()){ if (keys.next()) cst.setId(keys.getInt(1)); }
        }
    }

    public void update(Customer cst) throws SQLException {
        String sql = "UPDATE cliente SET nome=?,email=?,telefone=?,endereco=? WHERE id=?";
        try (Connection c = Database.getConnection(); PreparedStatement ps = c.prepareStatement(sql)){
            ps.setString(1, cst.getNome()); ps.setString(2, cst.getEmail()); ps.setString(3, cst.getTelefone()); ps.setString(4, cst.getEndereco()); ps.setInt(5, cst.getId());
            ps.executeUpdate();
        }
    }

    public void delete(int id) throws SQLException {
        String sql = "DELETE FROM cliente WHERE id=?";
        try (Connection c = Database.getConnection(); PreparedStatement ps = c.prepareStatement(sql)){
            ps.setInt(1, id); ps.executeUpdate();
        }
    }
}


// FILE: src/com/adminapp/dao/ProductDAO.java
package com.adminapp.dao;

import com.adminapp.db.Database;
import com.adminapp.model.Product;
import java.sql.*;
import java.util.*;
import java.math.BigDecimal;

public class ProductDAO {
    public List<Product> findAll() throws SQLException {
        List<Product> list = new ArrayList<>();
        String sql = "SELECT id,nome,descricao,preco,quantidade FROM produto ORDER BY nome";
        try (Connection c = Database.getConnection(); PreparedStatement ps = c.prepareStatement(sql); ResultSet rs = ps.executeQuery()){
            while (rs.next()){
                Product p = new Product();
                p.setId(rs.getInt(1)); p.setNome(rs.getString(2)); p.setDescricao(rs.getString(3)); p.setPreco(rs.getBigDecimal(4)); p.setQuantidade(rs.getInt(5));
                list.add(p);
            }
        }
        return list;
    }

    public void insert(Product p) throws SQLException {
        String sql = "INSERT INTO produto (nome,descricao,preco,quantidade) VALUES(?,?,?,?)";
        try (Connection c = Database.getConnection(); PreparedStatement ps = c.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)){
            ps.setString(1, p.getNome()); ps.setString(2, p.getDescricao()); ps.setBigDecimal(3, p.getPreco()); ps.setInt(4, p.getQuantidade());
            ps.executeUpdate(); try (ResultSet keys = ps.getGeneratedKeys()){ if (keys.next()) p.setId(keys.getInt(1)); }
        }
    }

    public void update(Product p) throws SQLException {
        String sql = "UPDATE produto SET nome=?,descricao=?,preco=?,quantidade=? WHERE id=?";
        try (Connection c = Database.getConnection(); PreparedStatement ps = c.prepareStatement(sql)){
            ps.setString(1, p.getNome()); ps.setString(2, p.getDescricao()); ps.setBigDecimal(3, p.getPreco()); ps.setInt(4, p.getQuantidade()); ps.setInt(5, p.getId());
            ps.executeUpdate();
        }
    }

    public void delete(int id) throws SQLException {
        String sql = "DELETE FROM produto WHERE id=?";
        try (Connection c = Database.getConnection(); PreparedStatement ps = c.prepareStatement(sql)){
            ps.setInt(1, id); ps.executeUpdate();
        }
    }
}


// FILE: src/com/adminapp/dao/OrderDAO.java
package com.adminapp.dao;

import com.adminapp.db.Database;
import com.adminapp.model.Order;
import com.adminapp.model.OrderItem;
import java.sql.*;
import java.util.*;
import java.math.BigDecimal;

public class OrderDAO {
    public List<Order> findAll() throws SQLException {
        List<Order> list = new ArrayList<>();
        String sql = "SELECT id,cliente_id,data_pedido,total FROM pedido ORDER BY data_pedido DESC";
        try (Connection c = Database.getConnection(); PreparedStatement ps = c.prepareStatement(sql); ResultSet rs = ps.executeQuery()){
            while (rs.next()){
                Order o = new Order();
                o.setId(rs.getInt(1)); o.setClienteId(rs.getInt(2)); o.setDataPedido(rs.getTimestamp(3)); o.setTotal(rs.getBigDecimal(4));
                list.add(o);
            }
        }
        return list;
    }

    public void insert(Order o) throws SQLException {
        String insertPedido = "INSERT INTO pedido (cliente_id,total) VALUES (?,?)";
        String insertItem = "INSERT INTO item_pedido (pedido_id,produto_id,quantidade,subtotal) VALUES (?,?,?,?)";
        Connection c = null;
        try {
            c = Database.getConnection();
            c.setAutoCommit(false);
            try (PreparedStatement ps = c.prepareStatement(insertPedido, Statement.RETURN_GENERATED_KEYS)){
                ps.setInt(1, o.getClienteId()); ps.setBigDecimal(2, o.getTotal()); ps.executeUpdate();
                try (ResultSet keys = ps.getGeneratedKeys()){ if (keys.next()) o.setId(keys.getInt(1)); }
            }
            try (PreparedStatement psItem = c.prepareStatement(insertItem)){
                for (OrderItem it : o.getItems()){
                    psItem.setInt(1, o.getId()); psItem.setInt(2, it.getProdutoId()); psItem.setInt(3, it.getQuantidade()); psItem.setBigDecimal(4, it.getSubtotal());
                    psItem.addBatch();
                }
                psItem.executeBatch();
            }
            c.commit();
        } catch (SQLException ex){ if (c!=null) try{c.rollback();}catch(SQLException e){} throw ex; }
        finally { if (c!=null) try{c.setAutoCommit(true); c.close(); }catch(SQLException e){} }
    }
}


// FILE: src/com/adminapp/ui/MainFrame.java
package com.adminapp.ui;

import javax.swing.*;
import java.awt.*;

public class MainFrame extends JFrame {
    public MainFrame(){
        super("Sistema Administrativo");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setSize(1000,700);
        setLocationRelativeTo(null);
        initUI();
    }

    private void initUI(){
        JTabbedPane tabs = new JTabbedPane();
        tabs.addTab("Clientes", new CustomerPanel());
        tabs.addTab("Produtos", new ProductPanel());
        tabs.addTab("Pedidos", new OrderPanel());
        getContentPane().add(tabs, BorderLayout.CENTER);
    }
}


// FILE: src/com/adminapp/ui/CustomerPanel.java
package com.adminapp.ui;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import com.adminapp.dao.CustomerDAO;
import com.adminapp.model.Customer;
import java.awt.*;
import java.awt.event.*;
import java.sql.SQLException;
import java.util.List;

public class CustomerPanel extends JPanel {
    private JTable table;
    private DefaultTableModel model;
    private CustomerDAO dao = new CustomerDAO();

    public CustomerPanel(){
        setLayout(new BorderLayout());
        model = new DefaultTableModel(new Object[]{"ID","Nome","Email","Telefone","Endereço"},0){ public boolean isCellEditable(int r,int c){return false;} };
        table = new JTable(model);
        add(new JScrollPane(table), BorderLayout.CENTER);

        JPanel controls = new JPanel();
        JButton btnAdd = new JButton("Novo");
        JButton btnEdit = new JButton("Editar");
        JButton btnDel = new JButton("Excluir");
        JButton btnRefresh = new JButton("Atualizar");
        controls.add(btnAdd); controls.add(btnEdit); controls.add(btnDel); controls.add(btnRefresh);
        add(controls, BorderLayout.SOUTH);

        btnAdd.addActionListener(e -> openEditor(null));
        btnEdit.addActionListener(e -> {
            int r = table.getSelectedRow(); if (r==-1) return; int id = (int)model.getValueAt(r,0);
            try { Customer c = dao.findById(id); openEditor(c); } catch (SQLException ex){ showError(ex); }
        });
        btnDel.addActionListener(e -> {
            int r = table.getSelectedRow(); if (r==-1) return; int id = (int)model.getValueAt(r,0);
            int ok = JOptionPane.showConfirmDialog(this, "Excluir cliente?","Confirmar",JOptionPane.YES_NO_OPTION);
            if (ok==JOptionPane.YES_OPTION) try{ dao.delete(id); refresh(); } catch(SQLException ex){ showError(ex); }
        });
        btnRefresh.addActionListener(e -> refresh());

        refresh();
    }

    private void openEditor(Customer c){
        JTextField nome = new JTextField(); JTextField email = new JTextField(); JTextField telefone = new JTextField(); JTextField endereco = new JTextField();
        if (c!=null){ nome.setText(c.getNome()); email.setText(c.getEmail()); telefone.setText(c.getTelefone()); endereco.setText(c.getEndereco()); }
        Object[] fields = {"Nome:", nome, "Email:", email, "Telefone:", telefone, "Endereço:", endereco};
        int ok = JOptionPane.showConfirmDialog(this, fields, c==null?"Novo cliente":"Editar cliente", JOptionPane.OK_CANCEL_OPTION);
        if (ok==JOptionPane.OK_OPTION){
            try{
                if (c==null) c = new Customer();
                c.setNome(nome.getText()); c.setEmail(email.getText()); c.setTelefone(telefone.getText()); c.setEndereco(endereco.getText());
                if (c.getId()==0) dao.insert(c); else dao.update(c);
                refresh();
            } catch(SQLException ex){ showError(ex); }
        }
    }

    private void refresh(){
        try{ List<Customer> list = dao.findAll(); model.setRowCount(0); for (Customer c: list) model.addRow(new Object[]{c.getId(), c.getNome(), c.getEmail(), c.getTelefone(), c.getEndereco()}); }
        catch(SQLException ex){ showError(ex); }
    }

    private void showError(Exception ex){ ex.printStackTrace(); JOptionPane.showMessageDialog(this, "Erro: " + ex.getMessage()); }
}


// FILE: src/com/adminapp/ui/ProductPanel.java
package com.adminapp.ui;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import com.adminapp.dao.ProductDAO;
import com.adminapp.model.Product;
import java.awt.*;
import java.awt.event.*;
import java.sql.SQLException;
import java.util.List;
import java.math.BigDecimal;

public class ProductPanel extends JPanel {
    private JTable table;
    private DefaultTableModel model;
    private ProductDAO dao = new ProductDAO();

    public ProductPanel(){
        setLayout(new BorderLayout());
        model = new DefaultTableModel(new Object[]{"ID","Nome","Descrição","Preço","Quantidade"},0){ public boolean isCellEditable(int r,int c){return false;} };
        table = new JTable(model);
        add(new JScrollPane(table), BorderLayout.CENTER);

        JPanel controls = new JPanel();
        JButton btnAdd = new JButton("Novo");
        JButton btnEdit = new JButton("Editar");
        JButton btnDel = new JButton("Excluir");
        JButton btnRefresh = new JButton("Atualizar");
        controls.add(btnAdd); controls.add(btnEdit); controls.add(btnDel); controls.add(btnRefresh);
        add(controls, BorderLayout.SOUTH);

        btnAdd.addActionListener(e -> openEditor(null));
        btnEdit.addActionListener(e -> {
            int r = table.getSelectedRow(); if (r==-1) return; int id = (int)model.getValueAt(r,0);
            try { List<Product> list = dao.findAll(); Product target = list.stream().filter(p->p.getId()==id).findFirst().orElse(null); openEditor(target); } catch (SQLException ex){ showError(ex); }
        });
        btnDel.addActionListener(e -> {
            int r = table.getSelectedRow(); if (r==-1) return; int id = (int)model.getValueAt(r,0);
            int ok = JOptionPane.showConfirmDialog(this, "Excluir produto?","Confirmar",JOptionPane.YES_NO_OPTION);
            if (ok==JOptionPane.YES_OPTION) try{ dao.delete(id); refresh(); } catch(SQLException ex){ showError(ex); }
        });
        btnRefresh.addActionListener(e -> refresh());

        refresh();
    }

    private void openEditor(Product p){
        JTextField nome = new JTextField(); JTextField desc = new JTextField(); JTextField preco = new JTextField(); JTextField qtd = new JTextField();
        if (p!=null){ nome.setText(p.getNome()); desc.setText(p.getDescricao()); preco.setText(p.getPreco()!=null?p.getPreco().toString():""); qtd.setText(String.valueOf(p.getQuantidade())); }
        Object[] fields = {"Nome:", nome, "Descrição:", desc, "Preço:", preco, "Quantidade:", qtd};
        int ok = JOptionPane.showConfirmDialog(this, fields, p==null?"Novo produto":"Editar produto", JOptionPane.OK_CANCEL_OPTION);
        if (ok==JOptionPane.OK_OPTION){
            try{
                if (p==null) p = new Product();
                p.setNome(nome.getText()); p.setDescricao(desc.getText()); p.setPreco(new BigDecimal(preco.getText())); p.setQuantidade(Integer.parseInt(qtd.getText()));
                if (p.getId()==0) dao.insert(p); else dao.update(p);
                refresh();
            } catch(Exception ex){ showError(ex); }
        }
    }

    private void refresh(){
        try{ List<Product> list = dao.findAll(); model.setRowCount(0); for (Product p: list) model.addRow(new Object[]{p.getId(), p.getNome(), p.getDescricao(), p.getPreco(), p.getQuantidade()}); }
        catch(SQLException ex){ showError(ex); }
    }

    private void showError(Exception ex){ ex.printStackTrace(); JOptionPane.showMessageDialog(this, "Erro: " + ex.getMessage()); }
}


// FILE: src/com/adminapp/ui/OrderPanel.java
package com.adminapp.ui;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import com.adminapp.dao.OrderDAO;
import com.adminapp.dao.CustomerDAO;
import com.adminapp.dao.ProductDAO;
import com.adminapp.model.Order;
import com.adminapp.model.OrderItem;
import com.adminapp.model.Customer;
import com.adminapp.model.Product;
import java.awt.*;
import java.awt.event.*;
import java.sql.SQLException;
import java.util.*;
import java.math.BigDecimal;

public class OrderPanel extends JPanel {
    private JTable table;
    private DefaultTableModel model;
    private OrderDAO dao = new OrderDAO();

    public OrderPanel(){
        setLayout(new BorderLayout());
        model = new DefaultTableModel(new Object[]{"ID","Cliente ID","Data","Total"},0){ public boolean isCellEditable(int r,int c){return false;} };
        table = new JTable(model);
        add(new JScrollPane(table), BorderLayout.CENTER);

        JPanel controls = new JPanel();
        JButton btnNew = new JButton("Novo Pedido");
        JButton btnRefresh = new JButton("Atualizar");
        controls.add(btnNew); controls.add(btnRefresh);
        add(controls, BorderLayout.SOUTH);

        btnNew.addActionListener(e -> createOrder());
        btnRefresh.addActionListener(e -> refresh());

        refresh();
    }

    private void createOrder(){
        try{
            CustomerDAO cdao = new CustomerDAO(); ProductDAO pdao = new ProductDAO();
            List<Customer> customers = cdao.findAll(); List<Product> products = pdao.findAll();
            if (customers.isEmpty() || products.isEmpty()) { JOptionPane.showMessageDialog(this, "Cadastre clientes e produtos antes de criar pedidos."); return; }

            String[] customerNames = customers.stream().map(c->c.getId()+" - "+c.getNome()).toArray(String[]::new);
            String sel = (String)JOptionPane.showInputDialog(this, "Selecione Cliente:", "Cliente", JOptionPane.PLAIN_MESSAGE, null, customerNames, customerNames[0]);
            if (sel==null) return;
            int clienteId = Integer.parseInt(sel.split(" - ")[0]);

            // montar itens
            List<OrderItem> items = new ArrayList<>();
            boolean adding = true;
            while (adding){
                String[] prodNames = products.stream().map(p->p.getId()+" - "+p.getNome()+" (Qtd:"+p.getQuantidade()+")").toArray(String[]::new);
                String selp = (String)JOptionPane.showInputDialog(this, "Selecione Produto:", "Produto", JOptionPane.PLAIN_MESSAGE, null, prodNames, prodNames[0]);
                if (selp==null) break;
                int pid = Integer.parseInt(selp.split(" - ")[0]);
                String qtds = JOptionPane.showInputDialog(this, "Quantidade:", "1"); if (qtds==null) break;
                int qtd = Integer.parseInt(qtds);
                Product p = products.stream().filter(x->x.getId()==pid).findFirst().orElse(null);
                if (p==null) break;
                BigDecimal subtotal = p.getPreco().multiply(new BigDecimal(qtd));
                OrderItem it = new OrderItem(); it.setProdutoId(pid); it.setQuantidade(qtd); it.setSubtotal(subtotal);
                items.add(it);
                int resp = JOptionPane.showConfirmDialog(this, "Adicionar mais itens?","Continuar",JOptionPane.YES_NO_OPTION);
                if (resp!=JOptionPane.YES_OPTION) adding=false;
            }
            if (items.isEmpty()) return;
            BigDecimal total = BigDecimal.ZERO; for (OrderItem it : items) total = total.add(it.getSubtotal());
            Order o = new Order(); o.setClienteId(clienteId); o.setItems(items); o.setTotal(total);
            dao.insert(o);
            JOptionPane.showMessageDialog(this, "Pedido criado com ID: " + o.getId());
            refresh();
        } catch(Exception ex){ ex.printStackTrace(); JOptionPane.showMessageDialog(this, "Erro: " + ex.getMessage()); }
    }

    private void refresh(){
        try{ List<Order> list = dao.findAll(); model.setRowCount(0); for (Order o: list) model.addRow(new Object[]{o.getId(), o.getClienteId(), o.getDataPedido(), o.getTotal()}); }
        catch(SQLException ex){ ex.printStackTrace(); JOptionPane.showMessageDialog(this, "Erro: " + ex.getMessage()); }
    }
}


// FILE: src/com/adminapp/util/CSVExporter.java
package com.adminapp.util;

import java.io.*;
import javax.swing.table.TableModel;

public class CSVExporter {
    public static void export(TableModel model, File file) throws IOException{
        try (PrintWriter pw = new PrintWriter(new FileWriter(file))){
            int cols = model.getColumnCount();
            for (int c=0;c<cols;c++){ pw.print(model.getColumnName(c)); if (c<cols-1) pw.print(','); }
            pw.println();
            int rows = model.getRowCount();
            for (int r=0;r<rows;r++){
                for (int c=0;c<cols;c++){
                    Object v = model.getValueAt(r,c);
                    pw.print(v==null?"":v.toString()); if (c<cols-1) pw.print(',');
                }
                pw.println();
            }
        }
    }
}


# FIM


---

# JavaFX Project (pronto para importar no Eclipse)

O projeto JavaFX abaixo é uma versão completa do sistema administrativo em JavaFX, usando o mesmo esquema SQL (`sql/schema.sql`) criado anteriormente. Cole os arquivos sob `src/` e os FXMLs em `resources/com/adminapp/ui/` (ou mantenha junto ao pacote se preferir).

## Estrutura (resumida)

```
src/
└─ com.adminapp/
   ├─ Main.java
   ├─ db/Database.java
   ├─ dao/...
   ├─ model/...
   ├─ util/CSVExporter.java
   └─ ui/
      ├─ MainApp.java
      ├─ controllers/
      │   ├─ MainController.java
      │   ├─ CustomerController.java
      │   ├─ ProductController.java
      │   └─ OrderController.java
resources/
└─ com/adminapp/ui/
   ├─ MainView.fxml
   ├─ CustomerView.fxml
   ├─ ProductView.fxml
   └─ OrderView.fxml
```

---

// FILE: src/com/adminapp/Main.java
package com.adminapp;

import javafx.application.Application;

public class Main {
    public static void main(String[] args) {
        Application.launch(com.adminapp.ui.MainApp.class, args);
    }
}


// FILE: src/com/adminapp/ui/MainApp.java
package com.adminapp.ui;

import javafx.application.Application;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.stage.Stage;

public class MainApp extends Application {
    @Override
    public void start(Stage primaryStage) throws Exception {
        FXMLLoader loader = new FXMLLoader(getClass().getResource("/com/adminapp/ui/MainView.fxml"));
        Parent root = loader.load();
        Scene scene = new Scene(root);
        primaryStage.setTitle("Sistema Administrativo (JavaFX)");
        primaryStage.setScene(scene);
        primaryStage.setWidth(1000);
        primaryStage.setHeight(700);
        primaryStage.show();
    }
}


// FILE: resources/com/adminapp/ui/MainView.fxml
<?xml version="1.0" encoding="UTF-8"?>
<?import javafx.scene.control.*?>
<?import javafx.scene.layout.*?>
<BorderPane xmlns="http://javafx.com/javafx/8.0.171" xmlns:fx="http://javafx.com/fxml/1"
            fx:controller="com.adminapp.ui.controllers.MainController">
    <center>
        <TabPane fx:id="tabPane">
            <tabs>
                <Tab text="Clientes" closable="false">
                    <fx:include source="CustomerView.fxml"/>
                </Tab>
                <Tab text="Produtos" closable="false">
                    <fx:include source="ProductView.fxml"/>
                </Tab>
                <Tab text="Pedidos" closable="false">
                    <fx:include source="OrderView.fxml"/>
                </Tab>
            </tabs>
        </TabPane>
    </center>
</BorderPane>


// FILE: resources/com/adminapp/ui/CustomerView.fxml
<?xml version="1.0" encoding="UTF-8"?>
<?import javafx.scene.control.*?>
<?import javafx.scene.layout.*?>
<VBox xmlns="http://javafx.com/javafx/8.0.171" xmlns:fx="http://javafx.com/fxml/1"
      fx:controller="com.adminapp.ui.controllers.CustomerController" spacing="8" padding="10">

    <TableView fx:id="tableCustomers" prefHeight="500">
        <columns>
            <TableColumn fx:id="colId" text="ID" prefWidth="50"/>
            <TableColumn fx:id="colNome" text="Nome" prefWidth="150"/>
            <TableColumn fx:id="colEmail" text="Email" prefWidth="150"/>
            <TableColumn fx:id="colTelefone" text="Telefone" prefWidth="100"/>
            <TableColumn fx:id="colEndereco" text="Endereço" prefWidth="200"/>
        </columns>
    </TableView>

    <HBox spacing="8">
        <Button text="Novo" onAction="#onNew"/>
        <Button text="Editar" onAction="#onEdit"/>
        <Button text="Excluir" onAction="#onDelete"/>
        <Button text="Atualizar" onAction="#onRefresh"/>
    </HBox>
</VBox>


// FILE: resources/com/adminapp/ui/ProductView.fxml
<?xml version="1.0" encoding="UTF-8"?>
<?import javafx.scene.control.*?>
<?import javafx.scene.layout.*?>
<VBox xmlns="http://javafx.com/javafx/8.0.171" xmlns:fx="http://javafx.com/fxml/1"
      fx:controller="com.adminapp.ui.controllers.ProductController" spacing="8" padding="10">

    <TableView fx:id="tableProducts" prefHeight="500">
        <columns>
            <TableColumn fx:id="pColId" text="ID" prefWidth="50"/>
            <TableColumn fx:id="pColNome" text="Nome" prefWidth="200"/>
            <TableColumn fx:id="pColPreco" text="Preço" prefWidth="100"/>
            <TableColumn fx:id="pColQtd" text="Quantidade" prefWidth="100"/>
        </columns>
    </TableView>

    <HBox spacing="8">
        <Button text="Novo" onAction="#onNew"/>
        <Button text="Editar" onAction="#onEdit"/>
        <Button text="Excluir" onAction="#onDelete"/>
        <Button text="Atualizar" onAction="#onRefresh"/>
    </HBox>
</VBox>


// FILE: resources/com/adminapp/ui/OrderView.fxml
<?xml version="1.0" encoding="UTF-8"?>
<?import javafx.scene.control.*?>
<?import javafx.scene.layout.*?>
<VBox xmlns="http://javafx.com/javafx/8.0.171" xmlns:fx="http://javafx.com/fxml/1"
      fx:controller="com.adminapp.ui.controllers.OrderController" spacing="8" padding="10">

    <TableView fx:id="tableOrders" prefHeight="500">
        <columns>
            <TableColumn fx:id="oColId" text="ID" prefWidth="80"/>
            <TableColumn fx:id="oColCliente" text="Cliente ID" prefWidth="120"/>
            <TableColumn fx:id="oColData" text="Data" prefWidth="200"/>
            <TableColumn fx:id="oColTotal" text="Total" prefWidth="120"/>
        </columns>
    </TableView>

    <HBox spacing="8">
        <Button text="Novo Pedido" onAction="#onNewOrder"/>
        <Button text="Atualizar" onAction="#onRefresh"/>
    </HBox>
</VBox>


// FILE: src/com/adminapp/ui/controllers/CustomerController.java
package com.adminapp.ui.controllers;

import javafx.fxml.FXML;
import javafx.scene.control.*;
import com.adminapp.dao.CustomerDAO;
import com.adminapp.model.Customer;
import java.sql.SQLException;
import java.util.List;

public class CustomerController {

    @FXML private TableView<Customer> tableCustomers;
    @FXML private TableColumn<Customer, Integer> colId;
    @FXML private TableColumn<Customer, String> colNome;
    @FXML private TableColumn<Customer, String> colEmail;
    @FXML private TableColumn<Customer, String> colTelefone;
    @FXML private TableColumn<Customer, String> colEndereco;

    private CustomerDAO dao = new CustomerDAO();

    @FXML
    private void initialize() {
        colId.setCellValueFactory(c -> new javafx.beans.property.SimpleIntegerProperty(c.getValue().getId()).asObject());
        colNome.setCellValueFactory(c -> new javafx.beans.property.SimpleStringProperty(c.getValue().getNome()));
        colEmail.setCellValueFactory(c -> new javafx.beans.property.SimpleStringProperty(c.getValue().getEmail()));
        colTelefone.setCellValueFactory(c -> new javafx.beans.property.SimpleStringProperty(c.getValue().getTelefone()));
        colEndereco.setCellValueFactory(c -> new javafx.beans.property.SimpleStringProperty(c.getValue().getEndereco()));

        refreshTable();
    }

    @FXML
    private void onNew() { showCustomerDialog(null); }

    @FXML
    private void onEdit() {
        Customer selected = tableCustomers.getSelectionModel().getSelectedItem();
        if (selected != null) showCustomerDialog(selected);
    }

    @FXML
    private void onDelete() {
        Customer selected = tableCustomers.getSelectionModel().getSelectedItem();
        if (selected == null) return;
        Alert a = new Alert(Alert.AlertType.CONFIRMATION, "Excluir cliente?", ButtonType.YES, ButtonType.NO);
        a.showAndWait().ifPresent(btn -> {
            if (btn == ButtonType.YES) {
                try { dao.delete(selected.getId()); refreshTable(); }
                catch (SQLException e) { showError(e); }
            }
        });
    }

    @FXML
    private void onRefresh() { refreshTable(); }

    private void refreshTable() {
        try {
            List<Customer> list = dao.findAll();
            tableCustomers.getItems().setAll(list);
        } catch (SQLException e) { showError(e); }
    }

    private void showCustomerDialog(Customer c) {
        Dialog<Customer> dialog = new Dialog<>();
        dialog.setTitle(c == null ? "Novo Cliente" : "Editar Cliente");
        ButtonType ok = new ButtonType("OK", ButtonBar.ButtonData.OK_DONE);
        dialog.getDialogPane().getButtonTypes().addAll(ok, ButtonType.CANCEL);

        TextField nome = new TextField();
        TextField email = new TextField();
        TextField telefone = new TextField();
        TextField endereco = new TextField();
        if (c != null) { nome.setText(c.getNome()); email.setText(c.getEmail()); telefone.setText(c.getTelefone()); endereco.setText(c.getEndereco()); }

        GridPane grid = new GridPane();
        grid.setHgap(10); grid.setVgap(10);
        grid.add(new Label("Nome:"), 0, 0); grid.add(nome, 1, 0);
        grid.add(new Label("Email:"), 0, 1); grid.add(email, 1, 1);
        grid.add(new Label("Telefone:"), 0, 2); grid.add(telefone, 1, 2);
        grid.add(new Label("Endereço:"), 0, 3); grid.add(endereco, 1, 3);

        dialog.getDialogPane().setContent(grid);
        dialog.setResultConverter(dialogButton -> {
            if (dialogButton == ok) {
                if (c == null) c = new Customer();
                c.setNome(nome.getText()); c.setEmail(email.getText()); c.setTelefone(telefone.getText()); c.setEndereco(endereco.getText());
                try { if (c.getId() == 0) dao.insert(c); else dao.update(c); } catch (SQLException e) { showError(e); }
                return c;
            }
            return null;
        });

        dialog.showAndWait();
        refreshTable();
    }

    private void showError(Exception e) { e.printStackTrace(); new Alert(Alert.AlertType.ERROR, e.getMessage()).showAndWait(); }
}


// FILE: src/com/adminapp/ui/controllers/ProductController.java
package com.adminapp.ui.controllers;

import javafx.fxml.FXML;
import javafx.scene.control.*;
import com.adminapp.dao.ProductDAO;
import com.adminapp.model.Product;
import java.sql.SQLException;
import java.util.List;
import java.math.BigDecimal;

public class ProductController {
    @FXML private TableView<Product> tableProducts;
    @FXML private TableColumn<Product, Integer> pColId;
    @FXML private TableColumn<Product, String> pColNome;
    @FXML private TableColumn<Product, Object> pColPreco;
    @FXML private TableColumn<Product, Integer> pColQtd;

    private ProductDAO dao = new ProductDAO();

    @FXML
    private void initialize(){
        pColId.setCellValueFactory(c -> new javafx.beans.property.SimpleIntegerProperty(c.getValue().getId()).asObject());
        pColNome.setCellValueFactory(c -> new javafx.beans.property.SimpleStringProperty(c.getValue().getNome()));
        pColPreco.setCellValueFactory(c -> new javafx.beans.property.SimpleObjectProperty<>(c.getValue().getPreco()));
        pColQtd.setCellValueFactory(c -> new javafx.beans.property.SimpleIntegerProperty(c.getValue().getQuantidade()).asObject());
        refreshTable();
    }

    @FXML private void onNew(){ showProductDialog(null); }
    @FXML private void onEdit(){ Product sel = tableProducts.getSelectionModel().getSelectedItem(); if (sel!=null) showProductDialog(sel); }
    @FXML private void onDelete(){ Product sel = tableProducts.getSelectionModel().getSelectedItem(); if (sel==null) return; try{ dao.delete(sel.getId()); refreshTable(); }catch(SQLException e){ showError(e);} }
    @FXML private void onRefresh(){ refreshTable(); }

    private void refreshTable(){ try{ List<Product> list = dao.findAll(); tableProducts.getItems().setAll(list);}catch(SQLException e){ showError(e);} }

    private void showProductDialog(Product p){ Dialog<Product> dialog = new Dialog<>(); dialog.setTitle(p==null?"Novo Produto":"Editar Produto"); ButtonType ok = new ButtonType("OK", ButtonBar.ButtonData.OK_DONE); dialog.getDialogPane().getButtonTypes().addAll(ok, ButtonType.CANCEL);
        TextField nome = new TextField(); TextField preco = new TextField(); TextField qtd = new TextField(); if (p!=null){ nome.setText(p.getNome()); preco.setText(p.getPreco()!=null?p.getPreco().toString():""); qtd.setText(String.valueOf(p.getQuantidade())); }
        GridPane grid = new GridPane(); grid.setHgap(10); grid.setVgap(10); grid.add(new Label("Nome:"),0,0); grid.add(nome,1,0); grid.add(new Label("Preço:"),0,1); grid.add(preco,1,1); grid.add(new Label("Qtd:"),0,2); grid.add(qtd,1,2);
        dialog.getDialogPane().setContent(grid);
        dialog.setResultConverter(db -> { if (db==ok){ try{ if (p==null) p = new Product(); p.setNome(nome.getText()); p.setPreco(new BigDecimal(preco.getText())); p.setQuantidade(Integer.parseInt(qtd.getText())); if (p.getId()==0) dao.insert(p); else dao.update(p); } catch(Exception e){ showError(e);} return p; } return null; });
        dialog.showAndWait(); refreshTable(); }

    private void showError(Exception e){ e.printStackTrace(); new Alert(Alert.AlertType.ERROR, e.getMessage()).showAndWait(); }
}


// FILE: src/com/adminapp/ui/controllers/OrderController.java
package com.adminapp.ui.controllers;

import javafx.fxml.FXML;
import javafx.scene.control.*;
import com.adminapp.dao.OrderDAO;
import com.adminapp.dao.CustomerDAO;
import com.adminapp.dao.ProductDAO;
import com.adminapp.model.Order;
import com.adminapp.model.OrderItem;
import com.adminapp.model.Customer;
import com.adminapp.model.Product;
import java.sql.SQLException;
import java.util.*;
import java.math.BigDecimal;

public class OrderController {
    @FXML private TableView<Order> tableOrders;
    @FXML private TableColumn<Order,Integer> oColId;
    @FXML private TableColumn<Order,Integer> oColCliente;
    @FXML private TableColumn<Order,Object> oColData;
    @FXML private TableColumn<Order,Object> oColTotal;

    private OrderDAO dao = new OrderDAO();

    @FXML
    private void initialize(){
        oColId.setCellValueFactory(c -> new javafx.beans.property.SimpleIntegerProperty(c.getValue().getId()).asObject());
        oColCliente.setCellValueFactory(c -> new javafx.beans.property.SimpleIntegerProperty(c.getValue().getClienteId()).asObject());
        oColData.setCellValueFactory(c -> new javafx.beans.property.SimpleObjectProperty<>(c.getValue().getDataPedido()));
        oColTotal.setCellValueFactory(c -> new javafx.beans.property.SimpleObjectProperty<>(c.getValue().getTotal()));
        refresh();
    }

    @FXML private void onNewOrder(){ createOrder(); }
    @FXML private void onRefresh(){ refresh(); }

    private void createOrder(){
        try{
            CustomerDAO cdao = new CustomerDAO(); ProductDAO pdao = new ProductDAO();
            List<Customer> customers = cdao.findAll(); List<Product> products = pdao.findAll();
            if (customers.isEmpty() || products.isEmpty()) { new Alert(Alert.AlertType.INFORMATION, "Cadastre clientes e produtos antes de criar pedidos.").showAndWait(); return; }

            ChoiceDialog<Customer> cd = new ChoiceDialog<>(customers.get(0), customers);
            cd.setTitle("Selecionar Cliente"); cd.setHeaderText("Escolha o cliente");
            Optional<Customer> chosen = cd.showAndWait(); if (!chosen.isPresent()) return;
            int clienteId = chosen.get().getId();

            List<OrderItem> items = new ArrayList<>();
            boolean adding = true;
            while (adding){
                ChoiceDialog<Product> pd = new ChoiceDialog<>(products.get(0), products);
                pd.setTitle("Selecionar Produto"); pd.setHeaderText("Escolha o produto");
                Optional<Product> pch = pd.showAndWait(); if (!pch.isPresent()) break;
                TextInputDialog qtdDia = new TextInputDialog("1"); qtdDia.setHeaderText("Quantidade"); Optional<String> qres = qtdDia.showAndWait(); if (!qres.isPresent()) break;
                int qtd = Integer.parseInt(qres.get()); Product prod = pch.get(); BigDecimal subtotal = prod.getPreco().multiply(new BigDecimal(qtd));
                OrderItem it = new OrderItem(); it.setProdutoId(prod.getId()); it.setQuantidade(qtd); it.setSubtotal(subtotal); items.add(it);
                Alert more = new Alert(Alert.AlertType.CONFIRMATION, "Adicionar mais itens?", ButtonType.YES, ButtonType.NO); Optional<ButtonType> resp = more.showAndWait(); if (!resp.isPresent() || resp.get()!=ButtonType.YES) adding=false;
            }
            if (items.isEmpty()) return;
            BigDecimal total = BigDecimal.ZERO; for (OrderItem it : items) total = total.add(it.getSubtotal());
            Order o = new Order(); o.setClienteId(clienteId); o.setItems(items); o.setTotal(total);
            dao.insert(o);
            new Alert(Alert.AlertType.INFORMATION, "Pedido criado com ID: " + o.getId()).showAndWait();
            refresh();
        } catch(Exception e){ e.printStackTrace(); new Alert(Alert.AlertType.ERROR, e.getMessage()).showAndWait(); }
    }

    private void refresh(){ try{ List<Order> list = dao.findAll(); tableOrders.getItems().setAll(list); } catch(SQLException e){ e.printStackTrace(); new Alert(Alert.AlertType.ERROR, e.getMessage()).showAndWait(); } }
}


---

# Como importar e rodar no Eclipse (passo-a-passo)

1. No Eclipse: `File -> New -> Java Project` (ou JavaFX Project se disponível).
2. Copie a pasta `src/` e `resources/` para dentro da pasta do projeto Eclipse.
3. Adicione o driver `mysql-connector-java.jar` ao Build Path (`Project -> Properties -> Java Build Path -> Libraries`).
4. Se estiver usando Java 11+, configure o runtime do JavaFX: adicione as bibliotecas JavaFX ao módulo (ou use o e(fx)clipse plugin). Alternativamente, execute adicionando `--module-path /path/to/javafx-sdk/lib --add-modules javafx.controls,javafx.fxml` nas configurações de execução.
5. Ajuste o `db.properties` (coloque em `src/` ou `resources/`) com as credenciais do seu MySQL.
6. Execute `com.adminapp.Main`.

Observações finais:
- Caso queira, eu posso empacotar tudo em um ZIP pronto para download, ou gerar um projeto Maven com `pom.xml` já configurado para JavaFX e MySQL. Quer que eu gere o projeto em formato ZIP ou um `pom.xml` (Maven)?

# Pronto — o que quer que eu entregue agora?
- [1] Gerar ZIP do projeto JavaFX completo (código + resources + SQL + db.properties)
- [2] Gerar `pom.xml` para Maven (JavaFX + MySQL) e instruções para Eclipse
- [3] Apenas deixar o código no canvas para você copiar

Me diga o número da opção que prefere e eu gero imediatamente.
